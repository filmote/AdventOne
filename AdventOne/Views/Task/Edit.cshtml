@model AdventOne.Models.Task

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Task</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)
    @Html.Hidden("projectId", (object)ViewBag.Project.ID)
    @Html.Hidden("sequence", Model.Sequence)


    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RevenueType, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.RevenueType, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.RevenueType, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.InvoiceDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.InvoiceDate,
                new {
                        htmlAttributes = new {
                    @Value = DateTime.Now.ToString("dd/MM/yyyy"),
                    @class = "form-control"
                        },
                    })
            @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })

        </div>
    </div>

    <div id="servicesDiv">
        <h4>Services Details</h4>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.ServicesQuantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ServicesQuantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ServicesQuantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HourlyRate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.HourlyRate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HourlyRate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ServicesExtendedPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ServicesExtendedPrice, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
            </div>
        </div>
    </div>
    <div id="productDiv">
        <h4>Product Details</h4>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.ProductQuantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductQuantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductQuantity, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ProductUnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductUnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductUnitPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductExtendedPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductExtendedPrice, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SupplierID, "SupplierID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("SupplierID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <br />

    <h4>Task Details</h4>
    <hr />
    <div class="form-group">
        @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @Html.TextAreaFor(model => model.FullText, new { @class = "form-control tiny_mce" })

            @Html.ValidationMessageFor(model => model.FullText, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    <a href="@ViewBag.ReturnURL">
        <i class="fa fa-caret-square-o-left"></i>
    </a>
    @Html.ActionLink("Back to previous page", null, null, null, new { href = ViewBag.ReturnURL })
</div>

@section Scripts {

    @Scripts.Render("~/bundles/mce_editable_scripts")

    <script type="text/javascript">

            $("document").ready(function () {
                var selectedText = $("#RevenueType option:selected").text();
                if (selectedText == "REV" || selectedText == "COS") {
                    $("#productDiv").show();
                    $("#servicesDiv").hide();
                }
                if (selectedText == "SVC") {
                    $("#productDiv").hide();
                    $("#servicesDiv").show();
                }

            });

            $(function () {

                $('#InvoiceDate').datetimepicker({
                    format: 'DD/MM/YYYY',
                    showClose: true,
                    showClear: true,
                    showTodayButton: true,
                    toolbarPlacement: 'top'
                });
            });

            $('#ProductQuantity').focusout(function () {
                var qty = $("#ProductQuantity").val();
                var unit = $("#ProductUnitPrice").val();
                if ($.isNumeric(qty) && $.isNumeric(unit)) {
                    $("#ProductExtendedPrice").val(parseFloat(qty * unit).toFixed(2));
                }
                else {
                    $("#ProductExtendedPrice").val("");
                }
            });

            $('#ProductUnitPrice').focusout(function () {
                var qty = $("#ProductQuantity").val();
                var unit = $("#ProductUnitPrice").val();
                if ($.isNumeric(qty) && $.isNumeric(unit)) {
                    $("#ProductExtendedPrice").val(parseFloat(qty * unit).toFixed(2));
                }
                else {
                    $("#ProductExtendedPrice").val("");
                }
            });

            $('#ServicesQuantity').focusout(function () {
                var qty = $("#ServicesQuantity").val();
                var unit = $("#HourlyRate").val();
                if ($.isNumeric(qty) && $.isNumeric(unit)) {
                    $("#ServicesExtendedPrice").val(parseFloat(qty * unit).toFixed(2));
                }
                else {
                    $("#ServicesExtendedPrice").val("");
                }
            });

            $('#HourlyRate').focusout(function () {
                var qty = $("#ServicesQuantity").val();
                var unit = $("#HourlyRate").val();
                if ($.isNumeric(qty) && $.isNumeric(unit)) {
                    $("#ServicesExtendedPrice").val(parseFloat(qty * unit).toFixed(2));
                }
                else {
                    $("#ServicesExtendedPrice").val("");
                }
            });

            $("#RevenueType").change(function () {
                var selectedText = $("#RevenueType option:selected").text();
                if (selectedText == "REV" || selectedText == "COS") {
                    $("#productDiv").show();
                    $("#servicesDiv").hide();
                }
                if (selectedText == "SVC") {
                    $("#productDiv").hide();
                    $("#servicesDiv").show();
                }
            });

    </script>

    @Scripts.Render("~/bundles/mce_editable_scripts")

}