@model AdventOne.Models.Project

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Project</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    

    <table width="100%">
        <tr>
            <td valign="top">
                <div class="form-group">
                    @Html.LabelFor(model => model.EmployeeID, "EmployeeID", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("EmployeeID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CustomerID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerID, "CustomerID", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBox("CustomerName", "", "", new { @class = "form-control", data_autocomplete_url = Url.Action("Autocomplete") })
                        @Html.HiddenFor(m => m.CustomerID)
                        @Html.ValidationMessageFor(model => model.CustomerID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProjectName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ProjectName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.InvoiceDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.InvoiceDate,
                            new {
                                    htmlAttributes = new {
                                @Value = DateTime.Now.ToString("dd/MM/yyyy"),
                                @class = "form-control"
                                    },
                                })
                        @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })

                    </div>
                </div>

            </td>
            <td valign="top">
                <div class="form-group">
                    @Html.LabelFor(model => model.SalesStage, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.SalesStage, "Select an Item", new { @class = "form-control" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProjectStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.ProjectStatus, "Select an Item", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ProjectStatus, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Division, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.Division, "Select an Item", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Division, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.Location, "Select an Item", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Branch, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.Branch, "Select an Item", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Branch, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PaymentTermID, "PaymentTermID", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("PaymentTermID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PaymentTermID, "", new { @class = "text-danger" })
                    </div>
                </div>

            </td>
        </tr>
    </table>

</div>


    <div class="form-actions no-color">
        <input type="submit" value="Create" class="btn btn-default" />&nbsp;&nbsp;|&nbsp;&nbsp;
        <a href="@ViewBag.ReturnURL">
            <i class="fa fa-caret-square-o-left"></i>
        </a>
        @Html.ActionLink("Back to previous page", null, null, null, new { href = ViewBag.ReturnURL })
    </div>

    <label for="somevalue">Some value:</label>
}


@section Scripts {

<script type="text/javascript">

    $(document).ready(function () {
        $("#CustomerName").autocomplete({
            source: function(request, response) {
            $.ajax({
                type: "POST",
                url: '/Customer/Autocomplete',
                dataType: "json",
                data: {
                    term: request.term
                },
                error: function(xhr, textStatus, errorThrown) {
                    alert('Error: ' + xhr.responseText);
                },
                success: function(data) {
                    response($.map(data, function(c) {
                        return {
                            label: c.Label,
                            value: c.ID
                        }
                    }));
                }
                });
            },
            minLength:2,
            position: { offset: '-30 0' },  
            change: function (event, ui) {
                if (ui.item == null || ui.item == undefined) {
                    $("#CustomerName").val("");
                    $("#CustomerID").val("");
                }
                else {
                    $("#CustomerName").val(ui.item.label);
                    $("#CustomerID").val(ui.item.value);
                    updatePaymentTerms();
                }
            },
            select: function (event, ui) {
                event.preventDefault();
                $("#CustomerName").val(ui.item.label);
                $('#CustomerID').val(ui.item.value);
                updatePaymentTerms();
                window.location="#"; //location to go when you select an item
            }     
        }); 
    });


    $("document").ready(function () {
        var selectedText = $("#RevenueType option:selected").text();
        if (selectedText == "REV" || selectedText == "COS") {
            $("#productDiv").show();
            $("#servicesDiv").hide();
        }
        if (selectedText == "SVC") {
            $("#productDiv").hide();
            $("#servicesDiv").show();
        }
    });

    $(function () {

        $('#InvoiceDate').datetimepicker({
            format: 'DD/MM/YYYY',
            showClose: true,
            showClear: true,
            showTodayButton: true,
            toolbarPlacement: 'top'
        });
    });

    $('#ProductQuantity').focusout(function () {
        var qty = $("#ProductQuantity").val();
        var unit = $("#ProductUnitPrice").val();
        if ($.isNumeric(qty) && $.isNumeric(unit)) {
            $("#ProductExtendedPrice").val(parseFloat(qty * unit).toFixed(2));
        }
        else {
            $("#ProductExtendedPrice").val("");
        }
    });

    $('#ProductUnitPrice').focusout(function () {
        var qty = $("#ProductQuantity").val();
        var unit = $("#ProductUnitPrice").val();
        if ($.isNumeric(qty) && $.isNumeric(unit)) {
            $("#ProductExtendedPrice").val(parseFloat(qty * unit).toFixed(2));
        }
        else {
            $("#ProductExtendedPrice").val("");
        }
    });

    $('#ServicesQuantity').focusout(function () {
        var qty = $("#ServicesQuantity").val();
        var unit = $("#HourlyRate").val();
        if ($.isNumeric(qty) && $.isNumeric(unit)) {
            $("#ServicesExtendedPrice").val(parseFloat(qty * unit).toFixed(2));
        }
        else {
            $("#ServicesExtendedPrice").val("");
        }
    });

    $('#HourlyRate').focusout(function () {
        var qty = $("#ServicesQuantity").val();
        var unit = $("#HourlyRate").val();
        if ($.isNumeric(qty) && $.isNumeric(unit)) {
            $("#ServicesExtendedPrice").val(parseFloat(qty * unit).toFixed(2));
        }
        else {
            $("#ServicesExtendedPrice").val("");
        }
    });

    $("#RevenueType").change(function () {
        var selectedText = $("#RevenueType option:selected").text();
        if (selectedText == "REV" || selectedText == "COS") {
            $("#productDiv").show();
            $("#servicesDiv").hide();
        }
        if (selectedText == "SVC") {
            $("#productDiv").hide();
            $("#servicesDiv").show();
        }
    });

    $("#CustomerID").change(updatePaymentTerms);

    function updatePaymentTerms() {
        var id = $("#CustomerID").val();
        $.ajax({
            type: "GET",
            url: "/Customer/GetPaymentTerms",
            contentType: "application/json; charset=utf-8",
            data: { "Id": id },
            datatype: "json",
            success: function (data) {
                var parsedData = JSON.parse(data);
                $("#PaymentTermID").val(parsedData['id']);
            },
            error: function () {
                alert("Dynamic content load failed.");
            }
        });

    };
</script>
}
